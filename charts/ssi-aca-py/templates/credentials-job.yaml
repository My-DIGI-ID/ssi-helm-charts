{{- if .Values.isIssuer }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-credentials-job"
  labels:
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
spec:
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      name: "{{ .Release.Name }}-credentials-job"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      containers:
      - name: initialize-credentials
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        env:
        - name: AGENT_URL
          value: "http://{{ include "ssi-aca-py.fullname" . }}:11080"
        - name: AGENT_CREDENTIAL_NAME
          value: {{ .Values.credentialName}}
        - name: SCHEMA_ID
          value: {{ .Values.schemaId}}
        - name: AGENT_API_KEY
          value: {{ .Values.apiKey}}
        - name: LOG_LEVEL
          value: {{ .Values.logLevel}}

        command: 
        - bash
        - -c 
        - |
          if [[ "debug" == $LOG_LEVEL ]]; then
            set -x;
          fi
          echo "Waiting for agent to be alive...";
          until curl -X GET -s --fail "$AGENT_URL" \
            -H  "accept: applicid/json" \
            -H  "X-API-KEY: $AGENT_API_KEY";
          do
            sleep 5;
          done;
          echo "agent is reachable";
          CREDENTIAL_DEFINITION_ID=$( \
          curl -X GET -s "$AGENT_URL/credential-definitions/created?schema_id=$SCHEMA_ID" \
            -H  "accept: application/json" \
            -H  "X-API-KEY: $AGENT_API_KEY" \
            | jq ".credential_definition_ids[] | select(. | endswith(\"$AGENT_CREDENTIAL_NAME\"))" \
            | sed 's/"//g'| head -n 1 )
          if [[ ! $CREDENTIAL_DEFINITION_ID ]]; then
            echo "Creating cred definition";
            CREDENTIAL_DEFINITION_ID=$(curl -Ss -X POST "$AGENT_URL/credential-definitions" \
              -H "X-Api-Key: $AGENT_API_KEY" \
              -H "accept: application/json" \
              -H "Content-Type: application/json" \
              -d "{  \"revocation_registry_size\": 1000,  \"schema_id\": \"$SCHEMA_ID\",  \"support_revocation\": true,  \"tag\": \"$AGENT_CREDENTIAL_NAME\"}");
            if [[ ! $(echo $CREDENTIAL_DEFINITION_ID | jq .) ]]; then
              echo "Request Failed";
              echo "$CREDENTIAL_DEFINITION_ID"
              exit 1;
            fi

            CREDENTIAL_DEFINITION_ID=$(echo $CREDENTIAL_DEFINITION_ID \
              | jq '.credential_definition_id' \
              | sed 's/"//g' );
            echo "Credential definition ID: $CREDENTIAL_DEFINITION_ID";
          else
            echo "Credential definition ID exists";
          fi;
          REVOCATION_REGISTRY_ID=$( \
            curl -X GET -s "$AGENT_URL/revocation/registries/created?cred_def_id=$CREDENTIAL_DEFINITION_ID" \
              -H  "accept: application/json" \
              -H  "X-API-KEY: $AGENT_API_KEY" \
              | jq ".rev_reg_ids[] | select(. | contains(\"$CREDENTIAL_DEFINITION_ID\"))" \
              | sed 's/"//g' \
              | head -n 1)
          if [[ ! $REVOCATION_REGISTRY_ID ]]; then

            echo "Create revocation registry";
            REVOCATION_REGISTRY_ID="$( \
              curl -s --fail -X POST "$AGENT_URL/revocation/create-registry" \
              -H "X-Api-Key: $AGENT_API_KEY" \
              -H "accept: application/json" \
              -H "Content-Type: application/json" \
              -d "{  \"credential_definition_id\": \"$CREDENTIAL_DEFINITION_ID\",  \"max_cred_num\": 1000}" || (echo  "FAIL"; exit 1)
            )";
            if [[ "FAIL" == $REVOCATION_REGISTRY_ID ]]; then
              echo "Request Failed";
              exit 1;
            fi
            REVOCATION_REGISTRY_ID=$(echo $REVOCATION_REGISTRY_ID | grep -Eo '\{"result":.+' | jq '.result' | jq '.revoc_reg_id' | sed 's/"//g')
          else
            echo "Revocation Registry ID exists";
          fi
          echo "Revocation Registry ID: $REVOCATION_REGISTRY_ID" 

     
{{- end }}



